plugins {
    id 'java-library'
    id 'net.neoforged.moddev' version '2.0.78'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

repositories {
    maven {
        name = 'Bawnorton'
        url = 'https://maven.bawnorton.com/releases/'
    }
    maven {
        name = 'BlameJared'
        url = 'https://maven.blamejared.com/'
    }
    maven {
        name = 'Sinytra'
        url = 'https://maven.su5ed.dev/releases/'
    }
    exclusiveContent {
        forRepository {
            maven {
                name = 'Modrinth'
                url = 'https://api.modrinth.com/maven/'
            }
        }
        filter {
            includeGroup 'maven.modrinth'
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = 'CurseForge'
                url = 'https://cursemaven.com/'
            }
        }
        filter {
            includeGroup 'curse.maven'
        }
    }
}

neoForge {
    version = project.neo_version

    parchment {
        minecraftVersion = project.parchment_minecraft_version
        mappingsVersion = project.parchment_mappings_version
    }

    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    compileOnly(annotationProcessor('com.github.bawnorton.mixinsquared:mixinsquared-common:0.2.0'))
    implementation(jarJar('com.github.bawnorton.mixinsquared:mixinsquared-neoforge:0.2.0'))

    compileOnly 'com.almostreliable.mods:almostunified-neoforge:1.21.1-1.2.3:api'
    runtimeOnly 'com.almostreliable.mods:almostunified-neoforge:1.21.1-1.2.3'
    implementation 'curse.maven:catalogue-459701:5893750'
    implementation 'maven.modrinth:biolith:5P2awS2z'
    implementation 'maven.modrinth:extended-industrialization:1.14.6-1.21.1'
    implementation 'maven.modrinth:jade:15.10.0+neoforge'
    implementation 'maven.modrinth:modern-industrialization:2.2.34'
    implementation 'maven.modrinth:owo-lib:0.12.15.1-beta.2+1.21'
    implementation 'org.sinytra:forgified-fabric-loader:2.5.34+0.16.0+1.21.1'

    compileOnly 'maven.modrinth:cerulean:1.1.1'
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = 'UTF-8'
}